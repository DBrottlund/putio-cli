#!/usr/bin/env python
import sys, os, ConfigParser;
import putio;

def info(api):
  me = api.get_user_info()

  print "Available bandwidth : %s/%s" % (putio.human_size(me.bw_quota_available), putio.human_size(me.bw_quota))
  print "Available disk space: %s/%s" % (putio.human_size(me.disk_quota_available), putio.human_size(me.disk_quota))


def ls(api, args):
  pass


def rm(api, args):
  pass


def mv(api, args):
  pass


def mkdir(api, args):
  pass


def add(api, args):
  if (len(args) == 0):
    text = ''.join(sys.stdin.readlines())
  else:
    text = "\n".join(args)

  bucket = api.create_bucket()
  urls = bucket.extract_urls(text)
  #print urls
  if len(urls) > 0:
    report = bucket.analyze(urls)
    print "\n------------------------------------------------------------------------"
    print "Required space         :", putio.human_size(report['Required Space'])
    print "Current space available:", putio.human_size(report['Current Available Disk Space'])
    print "URLs:"
    for url in report['Urls']['multiparturl']:
      print "  [m] %s" % url
    for url in report['Urls']['singleurl']:
      if url.error is not None:
        print "  [u] %s (%s) ERROR: %s" % (url.url, putio.human_size(url.size), url.error)
      else:
        print "  [u] %s (%s)" % (url.url, putio.human_size(url.size))
    for torrent in report['Urls']['torrenturl']:
      if torrent.error is not None:
        print "  [t] %s (%s) ERROR: %s" % (torrent.name, putio.human_size(torrent.size), torrent.error)
      else:
        print "  [t] %s (%s)" % (torrent.name, putio.human_size(torrent.size))
    for error in report['Urls']['error']:
      print "  [!] %s" % error
    bucket.fetch()
  else:
    print "No URLs found"


def geturl(api, args):
  pass


def dispatch_command(api, cmd, args=[]):
  if (cmd == 'info'):
    info(api)
  elif (cmd == 'add'):
    add(api, args)
  else:
    print "Unrecognised command: %s" + cmd


if __name__ == '__main__':
  config = ConfigParser.ConfigParser();
  config.read([os.path.expanduser('~/.config/putio-cli/config')])
  try:
    api = putio.Api(api_key=config.get('api', 'key'), api_secret=config.get('api', 'secret'))
  except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
    print "Please make sure your API credentials are set in %s" % os.path.expanduser('~/.config/putio-cli/config')
    sys.exit(1)
  except Exception as e:
    print 'An error occurred while connecting to put.io: %s' % e
    sys.exit(1)

  if not api.is_ready():
    print "Please make sure your API credentials are correct in %s" % os.path.expanduser('~/.config/putio-cli/config')
    sys.exit(1)

  if len(sys.argv) > 2:
    dispatch_command(api, sys.argv[1], sys.argv[2:])
  elif len(sys.argv) > 1:
    dispatch_command(api, sys.argv[1])
  else:
    info(api)
